{
  "name": "lessons-marketplace",
  "private": true,
  "scripts": {
    "build:frontend": "tsc --project tsconfig.json --noEmit && dotenv -e env/.env.${NODE_ENV} -- sh -c 'tsc --project tsconfig.json && VITE_TSCONFIG=tsconfig.json vite build --config frontend/config/vite.config.ts --emptyOutDir'",
    "build:server": "tsc --project tsconfig.json --noEmit && dotenv -e env/.env.${NODE_ENV} -- tsc --project tsconfig.json --outDir dist",
    "build:shared": "tsc --project tsconfig.json --noEmit && dotenv -e env/.env.${NODE_ENV} -- tsc --project tsconfig.json --outDir dist",
    "clean": "rm -rf dist && rm -rf node_modules",
    "dev:frontend": "dotenv -e env/.env.${NODE_ENV:-development} -- cross-env VITE_TSCONFIG=tsconfig.json vite --config frontend/config/vite.config.ts --force",
    "dev:full": "cross-env NODE_ENV=development concurrently \"pnpm run dev:frontend\" \"pnpm run dev:server\"",
    "dev:server": "dotenv -e env/.env.${NODE_ENV:-development} -- tsx watch server/index.ts",
    "dev:server:debug": "cross-env DEBUG=true NODE_ENV=development dotenv -e env/.env.development -- tsx watch server/index.ts",
    "docker:clean": "docker compose -f docker/docker-compose.yml down --volumes --remove-orphans && docker ps -aq | xargs -r docker rm -f && docker volume prune -f && docker network prune -f",
    "docker:db": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs database && docker compose -f docker/docker-compose.yml up -d database",
    "docker:db:rebuild": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs database && docker rmi docker-database:latest || true && docker compose -f docker/docker-compose.yml up -d --build database",
    "docker:debug": "tsx scripts/docker-debug.ts",
    "docker:debug:sh": "./scripts/debug-docker.sh",
    "docker:deep-clean": "chmod +x scripts/docker-cleanup.sh && ./scripts/docker-cleanup.sh",
    "docker:deploy": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml down && docker compose -f docker/docker-compose.yml up -d",
    "docker:deploy:rebuild": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml down && docker compose -f docker/docker-compose.yml build --no-cache && docker compose -f docker/docker-compose.yml up -d",
    "docker:deploy:fly": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml --profile deploy build --no-cache deploy && docker compose -f docker/docker-compose.yml --profile deploy up deploy --exit-code-from deploy",
    "docker:down": "pnpm docker:stop && docker compose -f docker/docker-compose.yml down --remove-orphans",
    "docker:frontend": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs frontend && docker compose -f docker/docker-compose.yml up -d frontend",
    "docker:frontend:rebuild": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs frontend && docker rmi docker-frontend:latest || true && docker compose -f docker/docker-compose.yml up -d --build frontend",
    "docker:logs": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml logs",
    "docker:logs:frontend": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml logs frontend",
    "docker:logs:server": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml logs server",
    "docker:ps": "docker ps -a",
    "docker:server": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs server && docker compose -f docker/docker-compose.yml up -d server",
    "docker:server:rebuild": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml rm -fs server && docker rmi docker-server:latest || true && docker compose -f docker/docker-compose.yml up -d --build server",
    "docker:stop": "docker compose -f docker/docker-compose.yml stop",
    "docker:test": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml --profile test run --rm --no-deps --use-aliases test pnpm test",
    "docker:test:rebuild": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml --profile test build test && docker compose -f docker/docker-compose.yml --profile test run --rm --use-aliases test pnpm test",
    "docker:up": "dotenv -e env/.env.development -- docker compose -f docker/docker-compose.yml down && docker compose -f docker/docker-compose.yml up -d",
    "fly:deploy": "pnpm fly:deploy:server && pnpm fly:deploy:frontend",
    "fly:deploy:frontend": "pnpm sync:fly:env:frontend && NODE_ENV=production flyctl deploy --config docker/fly-config/fly.frontend.toml",
    "fly:deploy:production": "NODE_ENV=production pnpm fly:deploy:server && pnpm fly:deploy:frontend",
    "fly:deploy:server": "pnpm sync:fly:env:server && NODE_ENV=production flyctl deploy --config docker/fly-config/fly.server.toml",
    "fly:secrets:frontend": "tsx scripts/env-config.ts fly-frontend",
    "fly:secrets:server": "tsx scripts/env-config.ts fly-server",
    "sync:fly:env:frontend": "node scripts/sync-fly-env.js frontend",
    "sync:fly:env:server": "node scripts/sync-fly-env.js server",
    "prisma:deploy": "prisma migrate deploy --schema=server/prisma/schema.prisma",
    "prisma:generate": "prisma generate --schema=server/prisma/schema.prisma",
    "prisma:migrate": "dotenv -e env/.env.${NODE_ENV} -- prisma migrate deploy --schema=server/prisma/schema.prisma",
    "prisma:seed": "dotenv -e env/.env.${NODE_ENV} -- tsx server/prisma/seed.ts",
    "prisma:studio": "dotenv -e env/.env.${NODE_ENV} -- prisma studio --schema=server/prisma/schema.prisma",
    "swagger:server": "tsx api-docs/serve-swagger.ts",
    "test": "dotenv -e env/.env.${NODE_ENV} -- jest tests/unit && NODE_OPTIONS=--no-warnings dotenv -e env/.env.${NODE_ENV} -- playwright test",
    "test:clean": "pnpm clean && pnpm install && pnpm prisma:generate && pnpm prisma:migrate && pnpm prisma:seed && pnpm test",
    "test:unit": "dotenv -e env/.env.${NODE_ENV} -- jest tests/unit",
    "test:e2e": "NODE_OPTIONS=--no-warnings dotenv -e env/.env.${NODE_ENV} -- playwright test",
    "typecheck": "NODE_ENV=production tsc --project tsconfig.json --noEmit",
    "typecheck:server": "NODE_ENV=production tsc --project tsconfig.json --noEmit",
    "typecheck:shared": "NODE_ENV=production tsc --project tsconfig.json --noEmit",
    "typecheck:frontend": "NODE_ENV=production tsc --project tsconfig.json --noEmit",
    "typecheck:all": "pnpm typecheck",
    "build:references": "tsc -b tsconfig.json",
    "diagnose:ts": "node scripts/diagnose-typescript.js",
    "fix:tsconfig": "node scripts/fix-tsconfig-json.js",
    "fix:typescript": "pnpm fix:tsconfig && pnpm typecheck",
    "check:deployment": "node scripts/check-build-errors.js",
    "lint-staged": "lint-staged",
    "start": "dotenv -e env/.env.${NODE_ENV:-test} -- node -r ts-node/register/transpile-only -r tsconfig-paths/register dist/server/index.js",
    "prisma:reset": "dotenv -e env/.env.${NODE_ENV} -- prisma migrate reset --force --schema=server/prisma/schema.prisma",
    "prisma:resolve-applied": "dotenv -e env/.env.${NODE_ENV} -- prisma migrate resolve --applied",
    "prisma:resolve-rolled-back": "dotenv -e env/.env.${NODE_ENV} -- prisma migrate resolve --schema=server/prisma/schema.prisma --rolled-back",
    "prisma:fresh-start": "dotenv -e env/.env.${NODE_ENV} -- sh -c 'psql \"$(echo $DATABASE_URL | sed \"s/?schema=public//\")\" -c \"DROP TABLE IF EXISTS _prisma_migrations;\" && prisma migrate dev --name initial_migration --create-only --schema=server/prisma/schema.prisma'",
    "prisma:create-migration": "dotenv -e env/.env.${NODE_ENV} -- prisma migrate dev --schema=server/prisma/schema.prisma",
    "backfill:lesson-statuses": "dotenv -e env/.env.${NODE_ENV} -- node scripts/backfill-lesson-statuses.js"
  },
  "dependencies": {
    "@tailwindcss/forms": "0.5.10",
    "@tailwindcss/oxide-darwin-arm64": "4.0.17",
    "@tailwindcss/oxide-darwin-x64": "4.0.17",
    "@tailwindcss/oxide-linux-arm64-gnu": "4.0.17",
    "@tailwindcss/oxide-linux-x64-gnu": "4.0.17",
    "@tailwindcss/postcss": "4.0.17",
    "amqplib": "0.10.7",
    "axios": "1.8.4",
    "bcrypt": "5.1.1",
    "bcryptjs": "3.0.2",
    "compression": "1.8.0",
    "cookie-parser": "1.4.7",
    "cors": "2.8.5",
    "dotenv": "16.4.7",
    "express": "5.1.0",
    "helmet": "8.1.0",
    "jsonwebtoken": "9.0.2",
    "morgan": "1.10.0",
    "pg": "8.14.1",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-router-dom": "7.4.1",
    "ts-node": "^10.9.2",
    "uuid": "^11.1.0",
    "zod": "3.24.2"
  },
  "devDependencies": {
    "@eslint/js": "9.23.0",
    "@jest/globals": "29.7.0",
    "@playwright/test": "1.51.1",
    "@prisma/client": "6.5.0",
    "@testing-library/jest-dom": "6.6.3",
    "@types/amqplib": "0.10.7",
    "@types/bcrypt": "5.0.2",
    "@types/compression": "1.7.5",
    "@types/cookie-parser": "1.4.8",
    "@types/cors": "2.8.17",
    "@types/express": "5.0.1",
    "@types/jest": "29.5.14",
    "@types/jsonwebtoken": "9.0.9",
    "@types/morgan": "1.9.9",
    "@types/node": "22.13.17",
    "@types/pg": "8.11.11",
    "@types/react": "19.0.12",
    "@types/react-dom": "19.0.4",
    "@types/uuid": "^10.0.0",
    "@vitejs/plugin-react": "4.3.4",
    "autoprefixer": "10.4.21",
    "concurrently": "9.1.2",
    "cross-env": "7.0.3",
    "dotenv-cli": "8.0.0",
    "eslint": "9.23.0",
    "eslint-plugin-react-hooks": "5.2.0",
    "eslint-plugin-react-refresh": "0.4.19",
    "globals": "16.0.0",
    "jest": "29.7.0",
    "jest-environment-jsdom": "29.7.0",
    "lightningcss-darwin-arm64": "1.29.3",
    "lightningcss-darwin-x64": "1.29.3",
    "lightningcss-linux-arm64-gnu": "1.29.3",
    "lightningcss-linux-x64-gnu": "1.29.3",
    "lint-staged": "15.5.0",
    "postcss": "8.5.3",
    "prisma": "6.5.0",
    "tailwindcss": "4.0.17",
    "ts-jest": "29.3.1",
    "ts-node-dev": "^2.0.0",
    "tsc-files": "1.1.4",
    "tsconfig-paths": "^4.2.0",
    "tsx": "4.19.3",
    "typescript": "5.8.3",
    "typescript-eslint": "8.29.0",
    "vite": "6.2.4"
  },
  "type": "module",
  "version": "0.0.0",
  "pnpm": {
    "onlyBuiltDependencies": [
      "@prisma/client",
      "@prisma/engines",
      "bcrypt",
      "esbuild",
      "prisma"
    ]
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "tsc-files --noEmit"
    ]
  }
}
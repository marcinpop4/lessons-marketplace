{
  "name": "lessons-marketplace",
  "private": true,
  "scripts": {
    "build:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} tsc --project tsconfig.json --noEmit && dotenv -e env/.env.${NODE_ENV} -- sh -c 'VITE_TSCONFIG=tsconfig.json vite build --config frontend/config/vite.config.ts --emptyOutDir'",
    "build:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- tsc --project tsconfig.json --noEmit false --outDir dist",
    "build:shared": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- tsc --project tsconfig.json --noEmit false --outDir dist",
    "dev:clean": "dotenv -e env/.env.${NODE_ENV} -- sh -c 'STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} pnpm dev:down && docker compose -f docker/docker-compose.yml down --volumes --remove-orphans'",
    "dev:clean:full": "dotenv -e env/.env.${NODE_ENV} -- sh -c 'echo \"ðŸ§¹ Full cleanup - removing all containers, volumes, images, and system cache...\" && docker compose -f docker/docker-compose.yml down --volumes --remove-orphans && docker system prune -af --volumes && docker builder prune -af && echo \"âœ… Full cleanup complete - ready for fresh start\"'",
    "dev:down": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml down --remove-orphans",
    "dev:up": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml up -d",
    "dev:up:structured": "STRUCTURED_LOGS=true DEV_QUIET_LOGS=false dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml up -d",
    "dev:build": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml build --no-cache",
    "dev:install": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server pnpm install --frozen-lockfile",
    "dev:shell:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server sh",
    "dev:shell:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec frontend sh",
    "dev:logs": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml logs -f",
    "dev:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- cross-env VITE_TSCONFIG=tsconfig.json vite --config frontend/config/vite.config.ts --force",
    "dev:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} cross-env LOG_LEVEL=info dotenv -e env/.env.${NODE_ENV} -- tsx watch server/index.ts",
    "diagnose:ts": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server node scripts/diagnose-typescript.js",
    "fly:deploy": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm fly:deploy:server && pnpm fly:deploy:frontend",
    "fly:deploy:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm sync:fly:env:frontend && flyctl deploy --config docker/fly-config/fly.frontend.toml",
    "fly:deploy:production": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm fly:deploy:server && pnpm fly:deploy:frontend",
    "fly:deploy:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm sync:fly:env:server && flyctl deploy --config docker/fly-config/fly.server.toml",
    "fly:secrets:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} tsx scripts/env-config.ts fly-frontend",
    "fly:secrets:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} tsx scripts/env-config.ts fly-server",
    "prisma:create-migration": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma migrate dev --schema=server/prisma/schema.prisma",
    "prisma:generate": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} npx prisma generate --schema=server/prisma/schema.prisma",
    "prisma:generate:container": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma generate --schema=server/prisma/schema.prisma",
    "prisma:migrate": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma migrate deploy --schema=server/prisma/schema.prisma",
    "prisma:reset": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma migrate reset --force --schema=server/prisma/schema.prisma",
    "prisma:resolve-applied": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma migrate resolve --schema=server/prisma/schema.prisma --applied",
    "prisma:resolve-rolled-back": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma migrate resolve --schema=server/prisma/schema.prisma --rolled-back",
    "prisma:seed": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx tsx --tsconfig tsconfig.json server/prisma/seed.ts",
    "prisma:setup": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm prisma:migrate && pnpm prisma:seed",
    "prisma:studio": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml exec server npx prisma studio --schema=server/prisma/schema.prisma",
    "start": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} dotenv -e env/.env.${NODE_ENV} -- node -r tsconfig-paths/register dist/server/index.js",
    "swagger:clean": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} rm -rf dist/swagger",
    "swagger:compile": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm swagger:clean && tsc scripts/generate-swagger-yaml.ts api-docs/serve-swagger.ts --esModuleInterop --module es2022 --moduleResolution node --allowSyntheticDefaultImports --outDir dist/swagger",
    "swagger:generate": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm swagger:compile && mkdir -p dist/swagger && node dist/swagger/scripts/generate-swagger-yaml.js",
    "swagger:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} pnpm swagger:generate && node dist/swagger/api-docs/serve-swagger.js",
    "sync:fly:env:frontend": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} node scripts/sync-fly-env.js frontend",
    "sync:fly:env:server": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} node scripts/sync-fly-env.js server",
    "test:all": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test sh -c 'npx jest --config tests/unit/jest.config.js && npx jest --config tests/api/jest.config.js && npx jest --config tests/logs/jest.config.js && npx playwright test --config tests/e2e/playwright.config.ts'",
    "test:unit": "npx jest --config tests/unit/jest.config.js",
    "test:unit:container": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test npx jest --config tests/unit/jest.config.js",
    "test:api": "npx jest --config tests/api/jest.config.js",
    "test:api:container": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test npx jest --config tests/api/jest.config.js",
    "test:e2e": "npx playwright test --config tests/e2e/playwright.config.ts",
    "test:e2e:container": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test npx playwright test --config tests/e2e/playwright.config.ts",
    "test:logs": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test npx jest --config tests/logs/jest.config.js",
    "test:logs:container": "dotenv -e env/.env.${NODE_ENV} -- docker compose -f docker/docker-compose.yml run --rm test npx jest --config tests/logs/jest.config.js",
    "typecheck": "STRUCTURED_LOGS=${STRUCTURED_LOGS:-true} tsc --noEmit",
    "validate:full": "STRUCTURED_LOGS=false tsx scripts/validate-with-timing.ts",
    "validate:fast": "STRUCTURED_LOGS=false tsx scripts/validate-with-timing.ts --fast"
  },
  "dependencies": {
    "@tailwindcss/forms": "0.5.10",
    "@tailwindcss/oxide-darwin-arm64": "4.0.17",
    "@tailwindcss/oxide-darwin-x64": "4.0.17",
    "@tailwindcss/oxide-linux-arm64-gnu": "4.0.17",
    "@tailwindcss/oxide-linux-x64-gnu": "4.0.17",
    "@tailwindcss/postcss": "4.0.17",
    "@types/js-yaml": "^4.0.9",
    "amqplib": "0.10.7",
    "axios": "1.8.4",
    "bcrypt": "5.1.1",
    "bcryptjs": "3.0.2",
    "compression": "1.8.0",
    "cookie-parser": "1.4.7",
    "cors": "2.8.5",
    "dotenv": "16.4.7",
    "express": "5.1.0",
    "helmet": "8.1.0",
    "js-yaml": "^4.1.0",
    "jsonwebtoken": "9.0.2",
    "morgan": "1.10.0",
    "openai": "^4.95.1",
    "pg": "8.14.1",
    "pino": "^9.7.0",
    "pino-http": "^10.4.0",
    "pino-std-serializers": "^7.0.0",
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "react-router-dom": "7.4.1",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "ts-node": "^10.9.2",
    "uuid": "^11.1.0",
    "web-vitals": "^5.0.2",
    "zod": "3.24.2"
  },
  "devDependencies": {
    "@eslint/js": "9.23.0",
    "@jest/globals": "29.7.0",
    "@playwright/test": "1.51.1",
    "@prisma/client": "6.5.0",
    "@testing-library/jest-dom": "6.6.3",
    "@types/amqplib": "0.10.7",
    "@types/bcrypt": "5.0.2",
    "@types/compression": "1.7.5",
    "@types/cookie-parser": "1.4.8",
    "@types/cors": "2.8.17",
    "@types/express": "5.0.1",
    "@types/jest": "29.5.14",
    "@types/jsonwebtoken": "9.0.9",
    "@types/morgan": "1.9.9",
    "@types/node": "22.13.17",
    "@types/pg": "8.11.11",
    "@types/react": "19.0.12",
    "@types/react-dom": "19.0.4",
    "@types/supertest": "^6.0.3",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@types/uuid": "^10.0.0",
    "@types/wait-on": "^5.3.4",
    "@vitejs/plugin-react": "4.3.4",
    "autoprefixer": "10.4.21",
    "chalk": "^5.4.1",
    "concurrently": "9.1.2",
    "cross-env": "7.0.3",
    "cross-env-shell": "^7.0.3",
    "dotenv-cli": "8.0.0",
    "eslint": "9.23.0",
    "eslint-plugin-react-hooks": "5.2.0",
    "eslint-plugin-react-refresh": "0.4.19",
    "execa": "^9.5.2",
    "globals": "16.0.0",
    "jest": "29.7.0",
    "jest-environment-jsdom": "29.7.0",
    "kill-port": "^2.0.1",
    "lightningcss-darwin-arm64": "1.29.3",
    "lightningcss-darwin-x64": "1.29.3",
    "lightningcss-linux-arm64-gnu": "1.29.3",
    "lightningcss-linux-x64-gnu": "1.29.3",
    "lint-staged": "15.5.0",
    "npm-run-all": "^4.1.5",
    "pino-pretty": "^13.0.0",
    "postcss": "8.5.3",
    "prisma": "6.5.0",
    "supertest": "^7.1.0",
    "tailwindcss": "4.0.17",
    "ts-jest": "29.3.1",
    "ts-node-dev": "^2.0.0",
    "tsc-files": "1.1.4",
    "tsconfig-paths": "^4.2.0",
    "tsx": "4.19.3",
    "typescript": "5.8.3",
    "typescript-eslint": "8.29.0",
    "vite": "6.2.4",
    "wait-on": "^8.0.3"
  },
  "type": "module",
  "version": "0.0.0",
  "pnpm": {
    "onlyBuiltDependencies": [
      "@prisma/client",
      "@prisma/engines",
      "bcrypt",
      "esbuild",
      "prisma"
    ]
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "tsc-files --noEmit"
    ]
  }
}
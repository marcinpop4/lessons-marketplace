---
description: API design
globs: 
alwaysApply: false
---
# API Design Principles

## Goal
Ensure API endpoints are designed following RESTful principles, are well-documented, and provide clear, consistent interfaces for clients.

## Design Principles
- **RESTful Design:** Follow RESTful design principles, including:
    - **Uniform Interface:** Resources should have clear, logical URIs (e.g., `/users`, `/users/{id}`). Use nouns for resources. Use HATEOAS links where appropriate for related resources or actions. ([Reference](https://restfulapi.net/rest-architectural-constraints/))
    - **Client-Server Separation:** Ensure endpoints ats and servers to evolve independently. ([Reference](https://restfulapi.net/rest-architectural-constraints/*Statelessness:** Each request must contain all necessary information; the server must not rely on stored session context (e.g., use thentication, not server-side sessions). ([Reference](https://restfulapi.net/json-vs-xml/))
    - **Idempotency:** Ensure GET, PUT, DELETE, HEAD, OPTIONS, TRACE m idempotent. Understand the implications of non-idempotent POST/PATCH methods. ([Reference](https://restfulapi.net/idempotent-rest-apis/))
    - **Use Standard HTTP Methods:** Use GET for retrieval, POST for creation, PUT/PATCH for updates, DELETE for removal.
- **No Internal Retry Logic:** Endpoints MUST NOT implement internal retry logic. Retries are the responsibility of the client or designated worker processes if needed.
- **HTTP Status Codes:** Use appropriate HTTP status codes consistently (e.g., 200 OK, 201 Created, 204 No Content; 400 Bad Request, 401 Unauthorized, 403 Forbidden, 404 Not Found, 409 Conflict; 500 Internal Server Error).
- **Error Responses:** Return clear, informative error messages in a consistent JSON format (e.g., `{ "error": "Description of error" }`) suitable for debugging, without exposing sensitive internal details.
- **Versioning:** Use URI versioning (e.g., `/api/v1/...`) for breaking API changes.
- **Data Formatting:** Use JSON for request and response bodies.
- **Naming Conventions:** Use consistent naming conventions (e.g., camelCase for JSON keys).

## Documentation
- **Swagger/OpenAPI:** API implementation MUST match the definitions in `api-docs/swagger.yaml`. Any changes to routes, request/response schemas, authentication, or status codes MUST be reflected in `swagger.yaml` *before* merging.
- Use clear descriptions for endpoints, parameters, and schemas in the Swagger definition.
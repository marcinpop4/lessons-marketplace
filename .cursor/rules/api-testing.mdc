---
description: api testing
globs: 
alwaysApply: false
---
# API Integration Testing Standards

## Goal
Ensure API endpoints function correctly, independently, and securely through robust integration testing using `supertest` and `jest`. Tests should be reliable, easy to understand, maintainable, and verify adherence to RESTful principles and documentation.

## File Organization
- All API integration tests MUST reside within the `tests/api` directory.
- Test files SHOULD be named corresponding to the resource they test (e.g., `address.test.ts`, `objective.test.ts`).
- Reusable helper functions for common test setup (like user creation, login, or resource creation) SHOULD be placed in the `tests/api/utils` directory (e.g., `user.utils.ts`, `lessonRequest.utils.ts`).
- put all test API calls in Reusable helper functions in tests/api/utils

## Test Structure
- Organize tests using nested `describe` blocks.
- The top-level `describe` SHOULD name the API resource endpoint (e.g., `describe('API Integration: /api/v1/addresses', ...)`).
- Inner `describe` blocks MUST correspond to specific HTTP method and path combinations tested within that block (e.g., `describe('POST /', ...)` , `describe('GET /:id', ...)`, `describe('GET /?queryParam=...', ...)`).

## Test Independence & Setup
- **No Seed Dependency:** Tests MUST NOT depend on data generated by the `prisma/seed.ts` script. Tests must remain valid even if seed data changes or is removed.
- **Isolation:** Tests within a file MUST be independent and MUST NOT rely on the side effects of previous tests.
    - Use `beforeEach` within a `describe` block to set up state specific to *a single test case* (e.g., creating a unique resource instance to be acted upon in that `it` block).
    - Use `beforeAll` *only* for setup that is genuinely common and non-interfering across *all* tests within its `describe` block (e.g., creating shared user roles like a student and teacher whose tokens are needed for various permission checks).
    - AVOID creating test-specific data (like "the address to be fetched in the GET test") in a top-level `beforeAll`; create it closer to the test(s) that need it, preferably in a `beforeEach` or a `beforeAll` specific to the relevant inner `describe` block.
- **Setup via API:** Create necessary prerequisite data (users, resources) for tests by calling the API endpoints themselves (using `supertest` and helper functions), not by directly manipulating the database or using service layers within tests.
- **Server Requirement:** API integration tests require the backend server to be running in a separate process.

## Authentication & Authorization
- Tests MUST simulate realistic authentication flows as implemented by the API (e.g., JWT Bearer tokens).
- Use helper utilities (`loginTestUser`) to obtain authentication tokens.
- Include the correct `Authorization: Bearer <token>` header in requests to protected endpoints (note the space after "Bearer").
- Explicitly test authorization rules:
    - Unauthenticated access (401).
    - Incorrect user roles (403, e.g., a teacher trying a student-only action).
    - Incorrect resource ownership (403, e.g., student A trying to access student B's data).

## Test Coverage
- Aim for comprehensive coverage for each endpoint:
    - **Success Cases:** Valid requests return expected status codes (200, 201, 204) and correct data structure/values matching the Swagger definition.
    - **Error Cases (4xx):**
        - Authentication/Authorization failures (401, 403).
        - Invalid input/validation errors (400 Bad Request - test missing fields, invalid formats, invalid enum values, boundary conditions).
        - Resource not found (404).
        - Conflicts (409, where applicable).
    - **Edge Cases:** Test potentially problematic inputs or scenarios.

## Running Tests & Scripts
- Run API tests using `pnpm test:api [-- <test_file_path>]`.
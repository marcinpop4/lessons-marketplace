services:
  # PostgreSQL database
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Backend API server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: server
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${PORT}
      # Database connection - use .env values
      - DB_HOST=db
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_SSL=${DB_SSL}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}?schema=public
      # JWT settings
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN}
      - REFRESH_TOKEN_EXPIRES_IN=${REFRESH_TOKEN_EXPIRES_IN}
      # Frontend URL for Docker
      - FRONTEND_URL=http://frontend
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./server:/app/server
      - ./shared:/app/shared
    # Fix the recursive command issue - run db migrations then start the server directly
    command: >
      sh -c "
        npx prisma generate --schema=server/prisma/schema.prisma &&
        npx prisma migrate deploy --schema=server/prisma/schema.prisma &&
        npx tsx server/index.ts"
    restart: on-failure:3

  # Frontend development server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: frontend
    ports:
      - "5173:80"
    environment:
      - NODE_ENV=${NODE_ENV}
      # For Docker, the frontend needs to connect to itself for API calls
      - VITE_API_BASE_URL=http://localhost:5173
    depends_on:
      - api
    # Add a network alias to ensure the frontend can reach the API
    networks:
      default:
        aliases:
          - frontend

volumes:
  postgres_data: 
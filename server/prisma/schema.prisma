// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// User Type enum for different types of users
enum UserType {
  STUDENT
  TEACHER
}

// Authentication Method enum for different authentication methods
enum AuthMethod {
  PASSWORD
  PIN
  GOOGLE
  // Add more methods as needed
}

// --- Objective Models ---

// Represents objectives set by students
model Objective {
  id            String   @id @default(uuid())
  studentId     String
  student       Student  @relation(fields: [studentId], references: [id])
  lessonType    LessonType // Link to the lesson type
  title         String
  description   String
  targetDate    DateTime // Target completion date for the objective
  currentStatusId String?  @unique // Link to the current status record (Must be unique, but optional on Objective itself)
  currentStatus   ObjectiveStatus? @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  statuses      ObjectiveStatus[] // Relation to status history

  @@index([studentId])
  @@index([lessonType])
}

// Represents the status history of an objective
model ObjectiveStatus {
  id          String   @id @default(uuid())
  objectiveId String
  objective   Objective @relation(fields: [objectiveId], references: [id])
  status      String   // e.g., CREATED, IN_PROGRESS, ACHIEVED, ABANDONED
  context     Json?    // Optional context for the status change
  createdAt   DateTime @default(now())

  // Relation field for the current status link on Objective
  currentObjective Objective? @relation("CurrentStatus")

  @@index([objectiveId])
  @@index([status])
}

// Teacher model for instructors
model Teacher {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  dateOfBirth DateTime
  isActive    Boolean  @default(true)
  
  // Relations
  lessonQuotes             LessonQuote[]
  teacherLessonHourlyRates TeacherLessonHourlyRate[]
  lessonPlans              LessonPlan[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

// Student model for users who book lessons
model Student {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  dateOfBirth DateTime
  isActive    Boolean  @default(true)
  
  // Relations
  lessonRequests LessonRequest[]
  objectives     Objective[] // Add relation to objectives
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// Represents the types of lessons available
enum LessonType {
  VOICE
  GUITAR
  BASS
  DRUMS
}

// Mapping table for teacher hourly rates by lesson type
model TeacherLessonHourlyRate {
  id            String     @id @default(uuid())
  teacher       Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     String
  type          LessonType
  rateInCents   Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Add Status Relations
  currentStatusId String?  @unique 
  currentStatus   TeacherLessonHourlyRateStatus? @relation("CurrentRateStatus", fields: [currentStatusId], references: [id])
  statuses        TeacherLessonHourlyRateStatus[] // History
}

// New Status model for TeacherLessonHourlyRate
model TeacherLessonHourlyRateStatus {
  id        String   @id @default(uuid())
  rateId    String
  rate      TeacherLessonHourlyRate @relation(fields: [rateId], references: [id], onDelete: Cascade) // Link back to the rate
  status    String   // ACTIVE, INACTIVE
  context   Json?    // Optional context
  createdAt DateTime @default(now())

  // Relation field for the current status link on TeacherLessonHourlyRate
  currentRate TeacherLessonHourlyRate? @relation("CurrentRateStatus")

  @@index([rateId])
  @@index([status])
}

// Address model for storing physical locations
model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  lessonRequests LessonRequest[]
}

// New model for lesson requests from students
model LessonRequest {
  id              String     @id @default(uuid())
  type            LessonType
  startTime       DateTime
  durationMinutes Int
  
  // Address relationship (now required)
  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  // Student relationship
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  // Quotes associated with this request
  lessonQuotes LessonQuote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for quotes provided by teachers
model LessonQuote {
  id                String        @id @default(uuid())
  costInCents       Int
  hourlyRateInCents Int
  lessonRequestId   String
  teacherId         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // Relations
  lessonRequest     LessonRequest @relation(fields: [lessonRequestId], references: [id])
  teacher           Teacher       @relation(fields: [teacherId], references: [id])
  Lesson            Lesson?       // Relation to the Lesson if quote is accepted
  
  // Status Relation Fields
  currentStatusId String?           @unique
  currentStatus   LessonQuoteStatus? @relation("CurrentQuoteStatus", fields: [currentStatusId], references: [id])
  statuses        LessonQuoteStatus[] // History

  @@index([lessonRequestId])
  @@index([teacherId])
}

// Status model for LessonQuote
model LessonQuoteStatus {
  id            String   @id @default(uuid())
  lessonQuoteId String   
  lessonQuote   LessonQuote @relation(fields: [lessonQuoteId], references: [id])
  status        String   // e.g., CREATED, ACCEPTED, REJECTED
  context       Json?    // Optional context 
  createdAt     DateTime @default(now())

  // Relation field for the current status link on LessonQuote
  currentLessonQuote LessonQuote? @relation("CurrentQuoteStatus")

  @@index([lessonQuoteId])
  @@index([status])
}

// Lesson model representing a confirmed music lesson
model Lesson {
  id              String         @id @default(cuid())
  quoteId         String         @unique
  quote           LessonQuote    @relation(fields: [quoteId], references: [id])
  currentStatusId String?        @unique
  currentStatus   LessonStatus?  @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  statuses        LessonStatus[] @relation("statuses")
  lessonPlan      LessonPlan?    @relation("PlanForLesson")
  milestoneId     String?        // Foreign key to Milestone
  milestone       Milestone?     @relation(fields: [milestoneId], references: [id]) // Relation to Milestone
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@index([milestoneId]) // Add index for the new foreign key
}

// Model for storing refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  userType  UserType
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?
}

// Model for storing lesson status changes
model LessonStatus {
  id        String   @id @default(uuid())
  lessonId  String
  status    String // Corresponds to LessonStatusValue in shared/models
  context   Json?
  createdAt DateTime @default(now())

  // Reference to the lesson - both for current status and history
  lesson        Lesson? @relation("statuses", fields: [lessonId], references: [id])
  currentLesson Lesson? @relation("CurrentStatus")

  @@index([lessonId])
}

// --- Password Credential Model --- 
model PasswordCredential {
  id             String   @id @default(uuid())
  hashedPassword String

  // Relation Field (polymorphic link to Student or Teacher)
  userId         String
  userType       UserType // STUDENT or TEACHER

  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Unique constraint to ensure one password per user account
  @@unique([userId, userType])
  // Optional: Index for faster lookups during authentication
  @@index([userId, userType])
}

// This table tracks which authentication methods are enabled for each user
model UserAuthMethod {
  id        String   @id @default(uuid())
  userId    String
  userType  UserType
  method    AuthMethodType
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, userType, method])
  @@index([userId, userType])
}

// Add this enum if it doesn't already exist
enum AuthMethodType {
  PASSWORD
  GOOGLE
  FACEBOOK
  // Add other methods as needed
}

// --- Lesson Plan Models ---

enum LessonPlanStatusValue {
  DRAFT
  PENDING_APPROVAL
  ACTIVE
  COMPLETED
  CANCELLED
  REJECTED
}

model LessonPlan {
  id              String                @id @default(uuid())
  title           String
  description     String
  dueDate         DateTime?
  lessonId        String?               @unique @db.Text
  lesson          Lesson?               @relation("PlanForLesson", fields: [lessonId], references: [id])
  teacherId       String                // Added teacher ID
  teacher         Teacher               @relation(fields: [teacherId], references: [id]) // Added teacher relation
  currentStatusId String?               @unique
  currentStatus   LessonPlanStatus?     @relation("CurrentLessonPlanStatus", fields: [currentStatusId], references: [id])
  statuses        LessonPlanStatus[]    @relation("LessonPlanStatusHistory")
  milestones      Milestone[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([lessonId])
  @@index([teacherId]) // Added index for teacherId
}

model LessonPlanStatus {
  id             String                @id @default(uuid())
  lessonPlanId   String
  lessonPlan     LessonPlan            @relation("LessonPlanStatusHistory", fields: [lessonPlanId], references: [id])
  status         LessonPlanStatusValue
  context        Json?
  createdAt      DateTime              @default(now())
  currentForPlan LessonPlan?           @relation("CurrentLessonPlanStatus")

  @@index([lessonPlanId])
  @@index([status])
}

enum MilestoneStatusValue {
  CREATED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Milestone {
  id              String                @id @default(uuid())
  title           String
  description     String
  dueDate         DateTime
  lessonPlanId    String
  lessonPlan      LessonPlan            @relation(fields: [lessonPlanId], references: [id])
  currentStatusId String?               @unique
  currentStatus   MilestoneStatus?      @relation("CurrentMilestoneStatus", fields: [currentStatusId], references: [id])
  statuses        MilestoneStatus[]     @relation("MilestoneStatusHistory")
  lessons         Lesson[]              // A milestone can have many lessons
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt

  @@index([lessonPlanId])
}

model MilestoneStatus {
  id                String             @id @default(uuid())
  milestoneId       String
  milestone         Milestone          @relation("MilestoneStatusHistory", fields: [milestoneId], references: [id])
  status            MilestoneStatusValue
  context           Json?
  createdAt         DateTime           @default(now())
  currentForMilestone Milestone?       @relation("CurrentMilestoneStatus")

  @@index([milestoneId])
  @@index([status])
}

// --- End Lesson Plan Models ---

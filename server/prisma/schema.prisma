// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "linux-musl", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL")
}

// User Type enum for different types of users
enum UserType {
  STUDENT
  TEACHER
}

// Authentication Method enum for different authentication methods
enum AuthMethod {
  PASSWORD
  PIN
  GOOGLE
  // Add more methods as needed
}

// Teacher model for instructors
model Teacher {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  dateOfBirth DateTime
  password    String?  // Optional to allow for different auth methods
  isActive    Boolean  @default(true)
  
  // Authentication related fields
  authMethods AuthMethod[] @default([])
  
  // Relations
  lessonQuotes             LessonQuote[]
  teacherLessonHourlyRates TeacherLessonHourlyRate[]
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
}

// Student model for users who book lessons
model Student {
  id          String   @id @default(uuid())
  firstName   String
  lastName    String
  email       String   @unique
  phoneNumber String
  dateOfBirth DateTime
  password    String?  // Optional to allow for different auth methods
  isActive    Boolean  @default(true)
  
  // Authentication related fields
  authMethods AuthMethod[] @default([])

  // Relations
  lessonRequests LessonRequest[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

// Represents the types of lessons available
enum LessonType {
  VOICE
  GUITAR
  BASS
  DRUMS
}

// Mapping table for teacher hourly rates by lesson type
model TeacherLessonHourlyRate {
  id            String     @id @default(uuid())
  teacher       Teacher    @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  teacherId     String
  type          LessonType
  rateInCents   Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deactivatedAt DateTime?

  @@unique([teacherId, type])
}

// Address model for storing physical locations
model Address {
  id         String   @id @default(uuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  lessonRequests LessonRequest[]
}

// New model for lesson requests from students
model LessonRequest {
  id              String     @id @default(uuid())
  type            LessonType
  startTime       DateTime
  durationMinutes Int
  
  // Address relationship (now required)
  address   Address @relation(fields: [addressId], references: [id])
  addressId String

  // Student relationship
  student   Student @relation(fields: [studentId], references: [id])
  studentId String

  // Quotes associated with this request
  lessonQuotes LessonQuote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// New model for quotes provided by teachers
model LessonQuote {
  id                String        @id @default(uuid())
  costInCents       Int
  hourlyRateInCents Int
  lessonRequestId   String
  teacherId         String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  lessonRequest     LessonRequest @relation(fields: [lessonRequestId], references: [id])
  teacher           Teacher       @relation(fields: [teacherId], references: [id])
  Lesson            Lesson?       // Relation to the Lesson if quote is accepted

  @@index([lessonRequestId])
  @@index([teacherId])
}

// Lesson model representing a confirmed music lesson
model Lesson {
  id              String         @id @default(cuid())
  quoteId         String         @unique
  quote           LessonQuote    @relation(fields: [quoteId], references: [id])
  currentStatusId String?        @unique
  currentStatus   LessonStatus?  @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  lessonStatuses  LessonStatus[] @relation("LessonStatuses")
  goals           Goal[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

// Model for storing refresh tokens
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  userType  UserType
  expiresAt DateTime
  createdAt DateTime @default(now())
  revokedAt DateTime?
}

// Model for storing lesson status changes
model LessonStatus {
  id        String   @id @default(uuid())
  lessonId  String
  status    String
  context   Json?
  createdAt DateTime @default(now())

  // Reference to the lesson - both for current status and history
  lesson        Lesson? @relation("LessonStatuses", fields: [lessonId], references: [id])
  currentLesson Lesson? @relation("CurrentStatus")

  @@index([lessonId])
  @@index([status])
}

// --- Goal Models ---

model Goal {
  id            String   @id @default(uuid())
  lessonId      String
  lesson        Lesson   @relation(fields: [lessonId], references: [id])
  title         String
  description   String
  estimatedLessonCount Int      // Required estimate of lessons needed
  currentStatusId String?  @unique // Link to the current status record (Must be unique, but optional on Goal itself)
  currentStatus   GoalStatus?  @relation("CurrentStatus", fields: [currentStatusId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  statuses GoalStatus[] // Relation to status history

  // Maybe a unique constraint on lessonId + description if needed?
  @@index([lessonId])
}

model GoalStatus {
  id        String   @id @default(uuid())
  goalId    String
  goal      Goal     @relation(fields: [goalId], references: [id])
  status    String
  context   Json?
  createdAt DateTime @default(now())

  // Add the missing opposite relation field for the current status
  currentGoal Goal? @relation("CurrentStatus")

  @@index([goalId])
  @@index([status])
}

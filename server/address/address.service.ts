import { PrismaClient } from '@prisma/client';
// Import DbAddress type from Prisma
import { Address as DbAddress, Prisma } from '@prisma/client';
// Import shared Address model and AddressDTO
import { Address, AddressDTO } from '../../shared/models/Address.js';
import prisma from '../prisma.js';
// Import the new mapper
import { AddressMapper } from './address.mapper.js';

class AddressService {
    private readonly prisma = prisma;

    /**
     * Creates a new address.
     * @param addressDTO The data required to create the address (AddressDTO).
     * @returns The created shared Address model instance with ID and timestamps.
     * @throws Error if creation fails.
     */
    async create(addressDTO: AddressDTO): Promise<Address | null> {
        try {
            // Use the DTO directly to provide data
            const newDbAddress = await this.prisma.address.create({
                data: {
                    // ID is typically generated by the database (e.g., uuid default)
                    street: addressDTO.street,
                    city: addressDTO.city,
                    state: addressDTO.state,
                    postalCode: addressDTO.postalCode,
                    country: addressDTO.country
                    // createdAt and updatedAt are handled by the DB/Prisma
                }
            });
            // Return the shared model instance using the mapper
            return AddressMapper.toModel(newDbAddress);
        } catch (error) {
            console.error('Error creating address:', error);
            // Throw a more specific error or handle Prisma errors if needed
            throw new Error(`Failed to create address: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }

    /**
     * Find an address by ID
     * @param id Address ID
     * @returns Shared Address model instance or null if not found
     */
    async findById(id: string): Promise<Address | null> {
        try {
            const dbAddress = await this.prisma.address.findUnique({
                where: { id }
            });

            if (!dbAddress) {
                return null;
            }
            // Return the shared model instance using the mapper
            return AddressMapper.toModel(dbAddress);
        } catch (error) {
            console.error('Error finding address:', error);
            throw new Error(`Failed to find address: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
    }
}

// Export singleton instance
export const addressService = new AddressService(); 
services:
  # Loki - Log aggregation system
  loki:
    image: grafana/loki:${LOKI_VERSION}
    container_name: ${LOKI_CONTAINER_NAME}
    ports:
      - "${LOKI_PORT}:3100"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:${PROMTAIL_VERSION}
    container_name: ${PROMTAIL_CONTAINER_NAME}
    volumes:
      - ../../logs:/var/log/app:ro  # Mount your logs directory
      - ./promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped
    environment:
      - PROMTAIL_VERSION=${PROMTAIL_VERSION}
    healthcheck:
      test: ["CMD-SHELL", "grep -q promtail /proc/1/comm || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:${GRAFANA_VERSION}
    container_name: ${GRAFANA_CONTAINER_NAME}
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GRAFANA_VERSION=${GRAFANA_VERSION}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./dashboards:/var/lib/grafana/dashboards
    depends_on:
      loki:
        condition: service_healthy
    networks:
      - observability
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Logrotate - Log rotation
  logrotate:
    image: alpine:3.19
    container_name: ${LOGROTATE_CONTAINER_NAME:-logrotate}
    volumes:
      - ../../logs:/var/log/app
      - ./logrotate.conf:/etc/logrotate.d/app-logs
    command: |
      sh -c "
        echo 'Installing logrotate...'
        apk add --no-cache logrotate
        echo 'Creating logrotate state directory...'
        mkdir -p /var/lib/logrotate
        echo 'Creating initial logrotate run...'
        /usr/sbin/logrotate /etc/logrotate.d/app-logs -s /var/lib/logrotate/status -f
        echo 'Starting logrotate loop...'
        while true; do
          sleep 3600  # Wait 1 hour
          echo 'Running logrotate...'
          /usr/sbin/logrotate /etc/logrotate.d/app-logs -s /var/lib/logrotate/status
        done
      "
    restart: unless-stopped
    networks:
      - observability
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'sleep 3600' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  observability:
    driver: bridge

volumes:
  loki-data:
    driver: local
  grafana-data:
    driver: local 
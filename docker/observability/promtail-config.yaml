server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # Docker container logs - reads from Docker's native log driver
  - job_name: docker-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      # Only scrape containers with our service labels
      - source_labels: [__meta_docker_container_label_service]
        target_label: service
      - source_labels: [__meta_docker_container_label_environment]
        target_label: environment
      - source_labels: [__meta_docker_container_name]
        target_label: container
      # Filter to only our lessons-marketplace containers
      - source_labels: [__meta_docker_container_label_service]
        regex: lessons-marketplace-.*
        action: keep
    pipeline_stages:
      # Parse JSON logs from our structured logging
      - json:
          expressions:
            level: level
            msg: msg
            time: time
            component: component
            service: service
            pageGroup: pageGroup
            event_type: event_type
            routeGroup: routeGroup
            method: method
            status: status
      # Set labels from parsed JSON fields
      - labels:
          level:
          component:
          pageGroup:
          event_type:
          routeGroup:
          method:
      # Create status class for HTTP logs (2xx, 3xx, 4xx, 5xx)
      - template:
          source: status_class
          template: "{{ if .status }}{{ .status | substr 0 1 }}xx{{ end }}"
      - labels:
          status_class:
      # Parse timestamp if available, with fallback formats
      - timestamp:
          source: time
          format: RFC3339
          fallback_formats:
            - RFC3339Nano
            - "2006-01-02T15:04:05.000Z"

# Promtail - Log shipper
promtail:
  image: grafana/promtail:3.3.1
  container_name: lessons-marketplace-promtail
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - ./observability/promtail-config.yaml:/etc/promtail/config.yml
  command: -config.file=/etc/promtail/config.yml
  depends_on:
    loki:
      condition: service_healthy
  restart: unless-stopped
  healthcheck:
    test: ["CMD-SHELL", "grep -q promtail /proc/1/comm || exit 1"]
    interval: 30s
    timeout: 10s
    retries: 3
    start_period: 15s 
server:
  http_listen_port: 9080
  grpc_listen_port: 0

positions:
  filename: /tmp/positions.yaml

clients:
  - url: http://loki:3100/loki/api/v1/push

scrape_configs:
  # HTTP request logs - structured logs with method, status, responseTime
  - job_name: http-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container
      - source_labels: [__meta_docker_container_name]
        regex: lessons-marketplace-server
        action: keep
      # Set the job label explicitly
      - target_label: job
        replacement: http-logs
    pipeline_stages:
      # Parse JSON to access fields but explicitly control what gets extracted
      - json:
          expressions:
            log_component: component
            log_method: method
            log_status: status
            log_responseTime: responseTime
            log_routeGroup: routeGroup
            log_level: level
            log_time: time
      # Create status_class from status (e.g., 200 -> 2xx)
      - template:
          source: log_status
          template: "{{ if .log_status }}{{ .log_status | substr 0 1 }}xx{{ end }}"
          target: status_class
      # Create labels for ALL extracted fields
      - labels:
          component: log_component
          method: log_method
          routeGroup: log_routeGroup
          status_class: status_class
          responseTime: log_responseTime
      # Drop non-http-logs (only keep http-logs)
      - drop:
          expression: 'component != "http-logs"'
      - timestamp:
          source: log_time
          format: RFC3339

  # Error logs - level 50 (error) logs from any container
  - job_name: error-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container
      - source_labels: [__meta_docker_container_name]
        regex: lessons-marketplace-.*
        action: keep
      # Set the job label explicitly
      - target_label: job
        replacement: error-logs
    pipeline_stages:
      - json:
          expressions:
            level: level
            time: time
            msg: msg
            component: component
      # Only keep error level logs
      - match:
          selector: '{level="50"}'
          stages:
            - labels:
                job:
                component:
      - timestamp:
          source: time
          format: RFC3339

  # Client logs - frontend application logs from server container
  - job_name: client-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container
      - source_labels: [__meta_docker_container_name]
        regex: lessons-marketplace-server
        action: keep
      # Set the job label explicitly
      - target_label: job
        replacement: client-logs
    pipeline_stages:
      - json:
          expressions:
            level: level
            time: time
            msg: msg
            pageGroup: pageGroup
            event_type: event_type
            source: source
            vitals: vitals
            component: component
      # Only keep client-originated logs
      - drop:
          expression: 'source != "client"'
      - labels:
          job:
          component:
          level:
          pageGroup:
          event_type:
      # Extract vitals data as individual fields for querying
      - json:
          expressions:
            vitals_fcp: vitals.fcp
            vitals_lcp: vitals.lcp
            vitals_cls: vitals.cls
            vitals_inp: vitals.inp
            vitals_ttfb: vitals.ttfb
      # Add vitals as labels only if they exist and are > 0
      - match:
          selector: '{component="client-logs"}'
          stages:
            - labels:
                vitals_fcp: vitals_fcp
                vitals_lcp: vitals_lcp
                vitals_cls: vitals_cls
                vitals_inp: vitals_inp
                vitals_ttfb: vitals_ttfb
      - timestamp:
          source: time
          format: UnixMs

  # Development/DevOps logs - performance metrics, CI/CD timing, and development tooling
  - job_name: devops-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container
      - source_labels: [__meta_docker_container_name]
        regex: lessons-marketplace-.*
        action: keep
      # Set the job label explicitly
      - target_label: job
        replacement: devops-logs
    pipeline_stages:
      - json:
          expressions:
            level: level
            time: time
            msg: msg
            component: component
            service: service
            environment: environment
            mode: mode
            success: success
            failureReason: failureReason
            failureStage: failureStage
            totalExecutionTimeMs: totalExecutionTimeMs
            totalSetupTimeMs: totalSetupTimeMs
            totalTestTimeMs: totalTestTimeMs
      # Only keep validation timing logs
      - drop:
          expression: 'component != "devops-logs"'
      # Create primary labels for filtering and grouping
      - labels:
          job:
          component:
          service:
          environment:
          mode:
          success:
          failureStage:
      # Extract setup step timings as individual fields
      - json:
          expressions:
            cleanDockerMs: setupSteps.cleanDockerMs
            buildImagesMs: setupSteps.buildImagesMs
            startServicesMs: setupSteps.startServicesMs
            installDepsMs: setupSteps.installDepsMs
            generatePrismaMs: setupSteps.generatePrismaMs
            setupDatabaseMs: setupSteps.setupDatabaseMs
            diagnoseTypescriptMs: setupSteps.diagnoseTypescriptMs
            unitTestsMs: testSuites.unitTestsMs
            apiTestsMs: testSuites.apiTestsMs
            e2eTestsMs: testSuites.e2eTestsMs
            setupTimeSeconds: performance.setupTimeSeconds
            testTimeSeconds: performance.testTimeSeconds
            totalTimeSeconds: performance.totalTimeSeconds
            setupPercentage: performance.setupPercentage
            testPercentage: performance.testPercentage
      - timestamp:
          source: time
          format: RFC3339

  # App logs - general application logs from server (non-HTTP, non-error, non-client)
  - job_name: app-logs
    docker_sd_configs:
      - host: unix:///var/run/docker.sock
        refresh_interval: 5s
    relabel_configs:
      - source_labels: [__meta_docker_container_name]
        target_label: container
      - source_labels: [__meta_docker_container_name]
        regex: lessons-marketplace-.*
        action: keep
      # Set the job label explicitly
      - target_label: job
        replacement: app-logs
    pipeline_stages:
      - json:
          expressions:
            level: level
            time: time
            msg: msg
            component: component
            service: service
            method: method
            status: status
            responseTime: responseTime
            source: source
      # Drop HTTP logs FIRST (handled by http-logs job)
      - drop:
          expression: 'component == "http-logs"'
      # Drop error logs (handled by error-logs job)
      - drop:
          expression: 'level == "50"'
      # Drop client logs (handled by client-logs job)
      - drop:
          expression: 'source == "client"'
      # Drop validation logs (handled by devops-logs job)
      - drop:
          expression: 'component == "devops-logs"'
      # Drop frontend logs (handled by client-logs job)
      - match:
          selector: '{container="/lessons-marketplace-frontend"}'
          action: drop
      - labels:
          job:
          level:
          component:
          service:
      - timestamp:
          source: time
          format: RFC3339 
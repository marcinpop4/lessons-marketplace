services:
  database:
    build:
      context: ..
      dockerfile: docker/database/Dockerfile
      args:
        ENV_TYPE: ${ENV_TYPE}
    container_name: lessons-marketplace-db
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    env_file:
      - ../env/.env.${ENV_TYPE}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\" && psql -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\" -c 'SELECT 1' || exit 1"]
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 10s

  server:
    build:
      context: ..
      dockerfile: docker/server/Dockerfile
      args:
        ENV_TYPE: ${ENV_TYPE}
    container_name: lessons-marketplace-server
    restart: on-failure
    ports:
      - "${SERVER_PORT:-3000}:3000"
    env_file:
      - ../env/.env.${ENV_TYPE}
    environment:
      - RUN_SEED=${RUN_SEED:-false}
      - SERVER_HEALTH_URL=http://localhost:3000/api/health
    depends_on:
      database:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f $$SERVER_HEALTH_URL | grep -q 'database.*connected' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 20s
    volumes:
      - ../logs:/app/logs:rw

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:3000}
        ENV_TYPE: ${ENV_TYPE}
    container_name: lessons-marketplace-frontend
    restart: "no"
    ports:
      - "${FRONTEND_PORT:-5173}:80"
    env_file:
      - ../env/.env.${ENV_TYPE}
    environment:
      - FRONTEND_HEALTH_URL=http://localhost:80/index.html
    depends_on:
      server:
        condition: service_healthy
        restart: true
    healthcheck:
      test: ["CMD-SHELL", "curl -f $$FRONTEND_HEALTH_URL || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - ../logs:/usr/share/nginx/logs:rw

  # Test service using our dedicated test Dockerfile
  test:
    profiles:
      - test
    build:
      context: ..
      dockerfile: docker/test/Dockerfile
      args:
        ENV_TYPE: ${ENV_TYPE}
    container_name: lessons-marketplace-test
    network_mode: "container:lessons-marketplace-frontend"
    environment:
      - JEST_JUNIT_OUTPUT_DIR=/app/test-results/
      - JEST_JUNIT_OUTPUT_NAME=junit.xml
      - PLAYWRIGHT_HEADLESS=true
      - SKIP_WEB_SERVER=true
      - MOCK_API=false
      - PLAYWRIGHT_TIMEOUT=30000
      - PLAYWRIGHT_ACTION_TIMEOUT=15000
      - PLAYWRIGHT_NAVIGATION_TIMEOUT=20000
      - DOCKER_FRONTEND_URL=http://localhost
      - TEST_ENV=docker
    volumes:
      - ../test-results:/app/test-results:rw
    depends_on:
      database:
        condition: service_healthy
        restart: false
      server:
        condition: service_healthy
        restart: false
      frontend:
        condition: service_healthy
        restart: false

volumes:
  postgres_data:
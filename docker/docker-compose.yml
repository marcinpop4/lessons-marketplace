services:
  database:
    build:
      context: ..
      dockerfile: docker/database/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: lessons-marketplace-db
    restart: "no"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    env_file:
      - ../env/.env.${NODE_ENV}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\" && psql -U \"$$POSTGRES_USER\" -d \"$$POSTGRES_DB\" -c 'SELECT 1' || exit 1"]
      interval: 2s
      timeout: 5s
      retries: 15
      start_period: 10s

  server:
    build:
      context: ..
      dockerfile: docker/server/Dockerfile.dev
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: lessons-marketplace-server
    restart: on-failure
    ports:
      - "${SERVER_PORT:-3000}:3000"
    env_file:
      - ../env/.env.${NODE_ENV}
    environment:
      - NODE_ENV=${NODE_ENV}
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - DOCKER_ENV=true  # Indicate running in Docker
      - STRUCTURED_LOGS=${STRUCTURED_LOGS:-false}  # Control log format (false = human-readable for dev)
      - LOG_LEVEL=${LOG_LEVEL:-info}  # Control log verbosity (debug, info, warn, error)
    depends_on:
      database:
        condition: service_healthy
        restart: true
    volumes:
      # Mount source code for hot reload
      - ../server:/app/server:cached
      - ../shared:/app/shared:cached
      - ../config:/app/config:cached
      - ../env:/app/env:cached
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
      - /app/server/node_modules
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service,environment"
    labels:
      - "service=lessons-marketplace-server"
      - "environment=development"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/v1/health | grep -q 'database.*connected' || exit 1"]
      interval: 5s
      timeout: 5s
      retries: 15
      start_period: 20s

  frontend:
    build:
      context: ..
      dockerfile: docker/frontend/Dockerfile.dev
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: lessons-marketplace-frontend
    restart: "no"
    ports:
      - "${FRONTEND_PORT:-5173}:5173"
    env_file:
      - ../env/.env.${NODE_ENV}
    environment:
      - NODE_ENV=${NODE_ENV}
      - CHOKIDAR_USEPOLLING=true  # For file watching in Docker
      - DOCKER_ENV=true  # Indicate running in Docker
      - VITE_API_BASE_URL=${VITE_API_BASE_URL}
      - STRUCTURED_LOGS=${STRUCTURED_LOGS:-false}  # Control log format (false = human-readable for dev)
      - DEV_QUIET_LOGS=${DEV_QUIET_LOGS:-true}  # Control development noise (true = hide healthchecks, false = show all logs)
      - LOG_LEVEL=${LOG_LEVEL:-info}  # Control log verbosity (debug, info, warn, error)
    depends_on:
      server:
        condition: service_healthy
        restart: true
    volumes:
      # Mount source code for hot reload
      - ../frontend:/app/frontend:cached
      - ../shared:/app/shared:cached
      - ../config:/app/config:cached
      - ../env:/app/env:cached
      # Exclude node_modules to avoid conflicts
      - /app/node_modules
      - /app/frontend/node_modules
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5173 || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # Test service
  test:
    profiles:
      - test
    build:
      context: ..
      dockerfile: docker/test/Dockerfile
      args:
        NODE_ENV: ${NODE_ENV}
    container_name: lessons-marketplace-test
    network_mode: "container:lessons-marketplace-frontend"
    environment:
      - NODE_ENV=${NODE_ENV}
      - TEST_ENV=docker
      - FRONTEND_URL=http://localhost:5173
    volumes:
      - ../tests/results/unit:/app/tests/results/unit:rw
      - ../tests/results/api:/app/tests/results/api:rw
      - ../tests/results/e2e:/app/tests/results/e2e:rw
      # Mount test source for hot reload
      - ../tests:/app/tests:cached
      # Mount source code that tests depend on
      - ../shared:/app/shared:cached
      - ../server:/app/server:cached
      - ../config:/app/config:cached
      - ../env:/app/env:cached
    depends_on:
      database:
        condition: service_healthy
        restart: false
      server:
        condition: service_healthy
        restart: false
      frontend:
        condition: service_healthy
        restart: false

  # === LOGGING INFRASTRUCTURE ===
  # Loki - Log aggregation system
  loki:
    image: grafana/loki:3.3.1
    container_name: lessons-marketplace-loki
    ports:
      - "3100:3100"
    volumes:
      - ./observability/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Promtail - Log shipper
  promtail:
    image: grafana/promtail:3.3.1
    container_name: lessons-marketplace-promtail
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./observability/promtail-config.yaml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "grep -q promtail /proc/1/comm || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s

  # Grafana - Visualization and dashboards
  grafana:
    image: grafana/grafana:11.4.0
    container_name: lessons-marketplace-grafana
    ports:
      - "3001:3000"  # Changed to 3001 to avoid conflict with server
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_SERVER_HTTP_PORT=3000
      - GF_SERVER_DOMAIN=localhost
    volumes:
      - grafana_data:/var/lib/grafana
      - ./observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ./observability/grafana-dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./observability/dashboards:/var/lib/grafana/dashboards
    depends_on:
      loki:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  loki_data:
  grafana_data:
//Recommendations
I want to follow best practices as documented in the language and framework documentation. Refer to those before coming up with recommendations.

// File Type Requirements
Always create TypeScript files (.ts, .tsx) and never JavaScript files (.js, .jsx) for application code. TypeScript code should be properly typed with explicit types rather than using 'any' where possible.

// Error Handling & Configuration
Never implement fallbacks for missing environment variables, configuration values, or error conditions. Explicitly check that required values exist and throw errors immediately if they don't. The application should fail fast rather than continue running with default values that might mask problems.

// CSS Best Practices
Never use '!important' in CSS rules. Structure CSS selectors with appropriate specificity to avoid specificity conflicts. Design CSS as a cohesive system where rules work together without overrides.

// Code Maintainability
Never hardcode values directly in components or functions. Extract all magic numbers, URLs, timeouts, and configuration values into named constants or environment variables with clear, descriptive names.

// HTML/CSS/JS Structure
Never use inline CSS (style attributes) or inline JavaScript (onclick attributes). Always use separate files for styles and scripts, and use proper event binding in TypeScript files.

// Testing
Never increase test timeouts without explicit permission. If tests are timing out, investigate and fix the underlying performance issue rather than extending the timeout.
Never ever copy code into a test, to test it in isolation. We either make a function more testable or find a way to test it.
Run tests in docker with --retries=0

// State Management
Never infer state or status values. All status changes must be explicit results of specific events or actions. Status transitions should be clearly defined and traceable to specific triggers.

// Architecture
Always keep business logic and calculations in the appropriate layer:
- For single-model operations: Place logic in the model itself
- For multi-model operations: Use dedicated service classes
- Never implement business logic or calculations directly in UI components or controllers
- Models are declared in shared/models. Use those throughout the app and don't create interfaces to compsensate for something missing in the shared model. We'll update teh shared model first. Prisma database types need to model themselves after the shared models.
- When generating log files, append a timestamp and avoid overriding files.
- Avoid updates and deletes in the database. Invalidate records for a delete (soft-delete). Invalidate records and create new ones for updates.

// API Design
Never implement retry logic in API endpoints. If an operation fails, return the appropriate error immediately. Retry logic should only be implemented at the worker or client level if explicitly requested.

// Package Management
Always maintain package.json in alphabetical order when adding new dependencies. This applies to both dependencies and devDependencies sections.

// Frontend Development
Never create placeholder or sample pages for deployment. Always implement the actual functionality to catch real issues early. The application should fail fast rather than displaying dummy content that masks underlying problems.

//File structure
Alwasy put scripts in the ./scripts folder. Add subfolders to keep the folder organized.
Never create symlinks and always reference files where they are located

//Environments
Run ad-hoc comands with ENV_TYPE=dev|ci|prod 
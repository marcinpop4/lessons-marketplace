openapi: 3.0.0
info:
  title: Lessons Marketplace API
  description: API for the Lessons Marketplace application
  version: 1.0.0
servers:
  - url: 'http://localhost:3000/api/v1'
    description: Development server
  - url: '/api/v1'
    description: Production relative path

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LessonStatusValue:
      type: string
      enum: [REQUESTED, ACCEPTED, REJECTED, COMPLETED, VOIDED]
      description: Possible statuses for a lesson
    
    LessonType:
      type: string
      enum: [VOICE, GUITAR, BASS, DRUMS]
    
    GoalStatusValue:
      type: string
      enum: [CREATED, IN_PROGRESS, COMPLETED, CANCELLED]
      description: Possible statuses for a goal
    
    GoalStatusTransition:
      type: string
      enum: [START, COMPLETE, CANCEL]
      description: Possible transitions for a goal status
    
    ObjectiveStatusValue:
      type: string
      enum: [CREATED, IN_PROGRESS, ACHIEVED, ABANDONED]
      description: Possible statuses for a student objective
    
    ObjectiveStatus:
      type: object
      properties:
        id:
          type: string
          format: uuid
        objectiveId:
          type: string
          format: uuid
        status:
          $ref: '#/components/schemas/ObjectiveStatusValue'
        context:
          type: object
          nullable: true
          description: Optional context for the status change (JSON)
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - objectiveId
        - status
        - createdAt
    
    Address:
      type: object
      properties:
        id:
          type: string
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - street
        - city
        - state
        - postalCode
        - country
    
    Student:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
      required:
        - id
        - firstName
        - lastName
        - email
    
    Teacher:
      type: object
      properties:
        id:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        phoneNumber:
          type: string
        dateOfBirth:
          type: string
          format: date
      required:
        - id
        - firstName
        - lastName
        - email
    
    TeacherWithRates:
      allOf:
        - $ref: '#/components/schemas/Teacher'
        - type: object
          properties:
            lessonHourlyRates:
              type: object
              additionalProperties:
                type: number
    
    Goal:
      type: object
      properties:
        id:
          type: string
        lessonId:
          type: string
        title:
          type: string
        description:
          type: string
        estimatedLessonCount:
          type: integer
          minimum: 1
        currentStatus:
          $ref: '#/components/schemas/GoalStatusValue'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - lessonId
        - title
        - description
        - estimatedLessonCount
    
    LessonRequest:
      type: object
      properties:
        id:
          type: string
        type:
          $ref: '#/components/schemas/LessonType'
        startTime:
          type: string
          format: date-time
        durationMinutes:
          type: integer
          minimum: 1
        address:
          $ref: '#/components/schemas/Address'
        studentId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - type
        - startTime
        - durationMinutes
        - address
        - studentId
    
    LessonQuote:
      type: object
      properties:
        id:
          type: string
        costInCents:
          type: integer
          minimum: 0
        lessonRequestId:
          type: string
        teacherId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        teacher:
          $ref: '#/components/schemas/Teacher'
        lessonRequest:
          $ref: '#/components/schemas/LessonRequest'
      required:
        - costInCents
        - lessonRequestId
        - teacherId
    
    Lesson:
      type: object
      properties:
        id:
          type: string
        quoteId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        currentStatusId:
          type: string
        goals:
          type: array
          items:
            $ref: '#/components/schemas/Goal'
      required:
        - quoteId
        - createdAt
        - updatedAt
        - currentStatusId
    
    UserCredentials:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        userType:
          type: string
          enum: [STUDENT, TEACHER]
      required:
        - email
        - password
        - userType
    
    RegistrationData:
      allOf:
        - $ref: '#/components/schemas/UserCredentials'
        - type: object
          properties:
            firstName:
              type: string
            lastName:
              type: string
            phoneNumber:
              type: string
            dateOfBirth:
              type: string
              format: date
          required:
            - firstName
            - lastName
            - phoneNumber
            - dateOfBirth
    
    AuthResponse:
      type: object
      properties:
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
            firstName:
              type: string
            lastName:
              type: string
            userType:
              type: string
              enum: [STUDENT, TEACHER]
        accessToken:
          type: string
      required:
        - user
        - accessToken
    
    TeacherStats:
      type: object
      properties:
        totalLessonsCompleted:
          type: integer
        totalEarnings:
          type: integer
        upcomingLessons:
          type: integer
    
    TeacherProfile:
      allOf:
        - $ref: '#/components/schemas/Teacher'
        - type: object
          properties:
            ratings:
              type: array
              items:
                type: object
            bio:
              type: string
            lessonRates:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    $ref: '#/components/schemas/LessonType'
                  rateInCents:
                    type: integer
                  isActive:
                    type: boolean
                  deactivatedAt:
                    type: string
                    format: date-time
                    nullable: true
                  createdAt:
                    type: string
                    format: date-time
                  updatedAt:
                    type: string
                    format: date-time
    
    Objective:
      type: object
      properties:
        id:
          type: string
          format: uuid
        studentId:
          type: string
          format: uuid
        lessonType:
          $ref: '#/components/schemas/LessonType'
        title:
          type: string
        description:
          type: string
        targetDate:
          type: string
          format: date-time
        currentStatusId:
          type: string
          format: uuid
          nullable: true
        currentStatus:
          $ref: '#/components/schemas/ObjectiveStatus'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - studentId
        - lessonType
        - title
        - description
        - targetDate
        - currentStatus
        - createdAt
        - updatedAt
    
    Error:
      type: object
      properties:
        error:
          type: string
      required:
        - error

security:
  - BearerAuth: []

paths:
  # Auth endpoints
  /auth/register:
    post:
      summary: Register a new user
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationData'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/login:
    post:
      summary: Login as an existing user
      tags:
        - Auth
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
            example:
              email: "ethan.parker@example.com"
              password: "1234"
              userType: "STUDENT"
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/refresh-token:
    post:
      summary: Refresh an expired access token
      tags:
        - Auth
      security: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        '401':
          description: Unauthorized or invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /auth/logout:
    post:
      summary: Logout the current user
      tags:
        - Auth
      responses:
        '200':
          description: Logout successful
  
  /auth/me:
    get:
      summary: Get the current authenticated user
      tags:
        - Auth
      responses:
        '200':
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  userType:
                    type: string
                    enum: [STUDENT, TEACHER]
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Goals endpoints
  /goals:
    post:
      summary: Create a new goal
      tags:
        - Goals
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lessonId:
                  type: string
                title:
                  type: string
                description:
                  type: string
                estimatedLessonCount:
                  type: integer
                  minimum: 1
              required:
                - lessonId
                - title
                - description
                - estimatedLessonCount
      responses:
        '201':
          description: Goal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /goals/{goalId}:
    get:
      summary: Get a goal by ID
      tags:
        - Goals
      security:
        - BearerAuth: []
      parameters:
        - name: goalId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Goal details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Goal'
        '404':
          description: Goal not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lessons/{lessonId}/goals:
    get:
      summary: Get all goals for a lesson
      tags:
        - Goals
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of goals for the lesson
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Goal'
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Health endpoint
  /health:
    get:
      summary: Health check endpoint
      tags:
        - Health
      security: []
      responses:
        '200':
          description: Server is healthy and database is connected
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  timestamp:
                    type: string
                    format: date-time
                  message:
                    type: string
        '500':
          description: Server is unhealthy or database is disconnected
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  timestamp:
                    type: string
                    format: date-time
                  message:
                    type: string
  
  # Lesson endpoints
  /lessons:
    post:
      summary: Create a new lesson from a quote
      tags:
        - Lessons
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quoteId:
                  type: string
              required:
                - quoteId
      responses:
        '201':
          description: Lesson created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lessons/{lessonId}:
    get:
      summary: Get a lesson by ID
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lesson details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '404':
          description: Lesson not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update the status of a lesson
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: lessonId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/LessonStatusValue'
              required:
                - status
      responses:
        '200':
          description: Lesson status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lessons/quote/{quoteId}:
    get:
      summary: Get a lesson by quote ID
      tags:
        - Lessons
      security:
        - BearerAuth: []
      parameters:
        - name: quoteId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lesson details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '404':
          description: Lesson not found or quote not accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Lesson Quotes endpoints
  /lesson-quotes/create-quotes:
    post:
      summary: Create initial quotes for a lesson request
      tags:
        - Lesson Quotes
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lessonRequestId:
                  type: string
                lessonType:
                  $ref: '#/components/schemas/LessonType'
              required:
                - lessonRequestId
                - lessonType
      responses:
        '201':
          description: Quotes created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonQuote'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (User is not a student)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lesson-quotes/request/{lessonRequestId}:
    get:
      summary: Get all quotes for a lesson request
      tags:
        - Lesson Quotes
      security:
        - BearerAuth: []
      parameters:
        - name: lessonRequestId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of lesson quotes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonQuote'
        '404':
          description: Lesson request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lesson-quotes/{quoteId}/accept:
    post:
      summary: Accept a lesson quote
      tags:
        - Lesson Quotes
      security:
        - BearerAuth: []
      parameters:
        - name: quoteId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Quote accepted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  lesson:
                    type: object
                    properties:
                      id:
                        type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Quote not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Lesson Requests endpoints
  /lesson-requests:
    post:
      summary: Create a new lesson request
      tags:
        - Lesson Requests
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  $ref: '#/components/schemas/LessonType'
                startTime:
                  type: string
                  format: date-time
                durationMinutes:
                  type: integer
                  minimum: 1
                addressObj:
                  $ref: '#/components/schemas/Address'
                studentId:
                  type: string
              required:
                - type
                - startTime
                - durationMinutes
                - addressObj
                - studentId
      responses:
        '201':
          description: Lesson request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonRequest'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lesson-requests/{id}:
    get:
      summary: Get a lesson request by ID
      tags:
        - Lesson Requests
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Lesson request details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LessonRequest'
        '404':
          description: Lesson request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /lesson-requests/student/{studentId}:
    get:
      summary: Get all lesson requests for a student
      tags:
        - Lesson Requests
      parameters:
        - name: studentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of lesson requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LessonRequest'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Student endpoints
  /students:
    post:
      summary: Create a new student
      tags:
        - Students
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: 'Test'
                lastName:
                  type: string
                  example: 'Student'
                email:
                  type: string
                  format: email
                  example: 'test.student.new@example.com'
                password:
                  type: string
                  format: password
                  example: 'password123'
                phoneNumber:
                  type: string
                  example: '111-222-3333'
                dateOfBirth:
                  type: string
                  format: date
                  example: '2005-06-07'
              required:
                - firstName
                - lastName
                - email
                - password
                - phoneNumber
                - dateOfBirth
      responses:
        '201':
          description: Student created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /students/{id}:
    get:
      summary: Get student details by ID
      description: Retrieves detailed information about a specific student.
      tags:
        - Students
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The student's unique identifier
      responses:
        '200':
          description: Student details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          description: Student not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Teacher endpoints
  /teachers:
    get:
      summary: Get available teachers
      tags:
        - Teachers
      parameters:
        - name: lessonType
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/LessonType'
        - name: limit
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            default: 5
      responses:
        '200':
          description: List of available teachers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherWithRates'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /teachers/profile:
    get:
      summary: Get the current teacher's profile
      tags:
        - Teachers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Teacher profile details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherProfile'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User is not a teacher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /teachers/stats:
    get:
      summary: Get the current teacher's statistics
      tags:
        - Teachers
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Teacher statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: User is not a teacher
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /teachers/lesson-rates:
    post:
      summary: Add or update a lesson rate for a teacher
      tags:
        - Teachers
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lessonType:
                  $ref: '#/components/schemas/LessonType'
                rateInCents:
                  type: integer
                  minimum: 0
              required:
                - lessonType
                - rateInCents
      responses:
        '201':
          description: Lesson rate added or updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  type:
                    $ref: '#/components/schemas/LessonType'
                  rateInCents:
                    type: integer
                  isActive:
                    type: boolean
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  /teachers/{teacherId}/lessons:
    get:
      summary: Get all lessons for a specific teacher
      description: Retrieves all lessons for a teacher. Can be optionally filtered by student ID.
      tags:
        - Teachers
      security:
        - BearerAuth: []
      parameters:
        - name: teacherId
          in: path
          required: true
          schema:
            type: string
          description: The teacher's unique identifier
        - name: studentId
          in: query
          required: false
          schema:
            type: string
          description: Optional filter to show only lessons for a specific student
      responses:
        '200':
          description: List of lessons for the teacher
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - $ref: '#/components/schemas/Lesson'
                    - type: object
                      properties:
                        goalCount:
                          type: integer
                          description: Number of goals associated with this lesson
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Can only access your own lessons
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  
  # Objectives endpoints
  /objectives:
    get:
      summary: Get objectives for the authenticated student
      tags:
        - Objectives
      security:
        - BearerAuth: []
      # Add query parameters if filtering is implemented (e.g., status, lessonType)
      # parameters:
      #   - name: status
      #     in: query
      #     required: false
      #     schema:
      #       $ref: '#/components/schemas/ObjectiveStatusValue'
      #     description: Filter objectives by status
      responses:
        '200':
          description: A list of objectives for the authenticated student
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Objective'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      summary: Create a new objective for the authenticated student
      tags:
        - Objectives
      security:
        - BearerAuth: []
      # Removed studentId from path parameter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                # studentId is no longer in the body, derived from authenticated user
                title:
                  type: string
                  example: "Master the C Major Scale"
                description:
                  type: string
                  example: "Be able to play the C Major scale ascending and descending at 80 bpm."
                lessonType:
                  $ref: '#/components/schemas/LessonType'
                  example: GUITAR
                targetDate:
                  type: string
                  format: date-time
                  example: "2024-12-31T23:59:59Z"
              required:
                - title
                - description
                - lessonType
                - targetDate
      responses:
        '201':
          description: Objective created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective'
        '400':
          description: Bad request (e.g., missing fields, invalid data)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /objectives/{objectiveId}:
    patch:
      summary: Update the status of an objective
      description: Updates the status of an objective (owned by the authenticated student), typically to ACHIEVED or ABANDONED.
      tags:
        - Objectives
      security:
        - BearerAuth: []
      parameters:
        - name: objectiveId
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: The ID of the objective to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  $ref: '#/components/schemas/ObjectiveStatusValue'
                  description: The new status for the objective (e.g., ACHIEVED, ABANDONED)
                context:
                  type: object
                  nullable: true
                  description: Optional context for the status change
              required:
                - status
            examples:
              achieve:
                value:
                  status: ACHIEVED
              abandon:
                value:
                  status: ABANDONED
                  context: { reason: "Changed focus" }
      responses:
        '200':
          description: Objective status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Objective' # Return the updated objective
        '400':
          description: Bad request (e.g., invalid status, invalid transition)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden (Objective not owned by user)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Objective not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
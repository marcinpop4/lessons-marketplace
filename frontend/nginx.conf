server {
    listen 0.0.0.0:80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html;

    # Gzip compression
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_min_length 1000;

    # Security headers
    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";
    add_header Referrer-Policy "strict-origin-when-cross-origin";
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline' https://rsms.me; font-src 'self' https://rsms.me; img-src 'self' data:; connect-src 'self' http://localhost:3000 http://localhost:5173 https://*.fly.dev;";

    # Cache control - more flexible for different environments
    set $cache_control "public, max-age=3600";
    
    # If request includes a no-cache header, disable caching
    if ($http_cache_control = "no-cache") {
        set $cache_control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    }
    
    # For development environment
    if ($http_x_environment = "development") {
        set $cache_control "no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0";
    }
    
    add_header Cache-Control $cache_control;
    
    # Static assets with environment-based caching
    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {
        add_header Cache-Control $cache_control;
        try_files $uri =404;
    }

    # Handle SPA routing - redirect all requests to index.html
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to the backend - supports both local Docker and Fly.io
    location /api/ {
        # Use the Docker DNS resolver for container networks
        resolver 127.0.0.11 valid=30s;
        set $upstream_api "http://api:3000";
        
        # Remove /api prefix when proxying to backend
        rewrite ^/api/(.*)$ /api/$1 break;
        
        # Explicit error handling - return a useful error instead of a generic 502
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_error;
        
        proxy_pass $upstream_api;
        
        # Standard proxy headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # CORS headers for API requests
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        
        # Handle OPTIONS requests for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header Access-Control-Allow-Credentials 'true';
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Longer timeouts for API requests
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # API error handler
    location @api_error {
        default_type application/json;
        return 502 '{"error": "API Server Unavailable", "message": "The API server is not responding. Please check your configuration or try again later.", "status": 502}';
    }

    # Also handle direct versioned API requests
    location /v1/ {
        resolver 127.0.0.11 valid=30s;
        set $upstream_api "http://api:3000";
        
        # Properly map v1 requests to API endpoints
        rewrite ^/v1/(.*)$ /api/v1/$1 break;
        
        # Explicit error handling
        proxy_intercept_errors on;
        error_page 502 503 504 = @api_error;
        
        proxy_pass $upstream_api;
        
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # CORS headers for API requests
        add_header Access-Control-Allow-Origin $http_origin always;
        add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization' always;
        add_header Access-Control-Allow-Credentials 'true' always;
        
        # Handle OPTIONS requests for CORS
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin $http_origin;
            add_header Access-Control-Allow-Methods 'GET, POST, PUT, DELETE, OPTIONS';
            add_header Access-Control-Allow-Headers 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
            add_header Access-Control-Allow-Credentials 'true';
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
        
        # Longer timeouts for API requests
        proxy_connect_timeout 120s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }

    # Serve the runtime config
    location = /config.js {
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        try_files $uri =404;
    }

    # Error pages
    error_page 404 /index.html;
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
} 
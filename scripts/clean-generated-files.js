#!/usr/bin/env node

/**
 * This script cleans up generated .js, .d.ts, and .d.ts.map files 
 * from source directories (frontend/ and server/) which should only exist in the dist/ directory.
 * 
 * It's safe to run as it only removes files that are generated by TypeScript
 * and not manually created JavaScript files.
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

// Get the current directory
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

// Define directories to clean
const dirsToClean = [
  path.join(projectRoot, 'frontend'),
  path.join(projectRoot, 'server'),
  path.join(projectRoot, 'shared')
];

// Files to ignore (e.g., manually created .js files)
const ignoreList = [
  // Add any files you want to ignore here
  '/eslint.config.js',
  '/jest.config.js',
  '/scripts',
  '/prisma',
  'vite-env.d.ts'
];

// Function to check if a file should be ignored
const shouldIgnore = (filePath) => {
  return ignoreList.some(ignore => filePath.includes(ignore));
};

// Function to check if a file is a TypeScript generated file
const isGeneratedFile = (filePath) => {
  // Check if there's a corresponding .ts or .tsx file
  const baseName = filePath.replace(/\.(js|d\.ts|d\.ts\.map)$/, '');
  return (
    (filePath.endsWith('.js') && (fs.existsSync(`${baseName}.ts`) || fs.existsSync(`${baseName}.tsx`))) ||
    (filePath.endsWith('.d.ts') && (fs.existsSync(`${baseName}.ts`) || fs.existsSync(`${baseName}.tsx`))) ||
    (filePath.endsWith('.d.ts.map') && (fs.existsSync(`${baseName}.ts`) || fs.existsSync(`${baseName}.tsx`)))
  );
};

// Function to recursively scan directories and remove generated files
const cleanDirectory = (dir) => {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const entry of entries) {
    const fullPath = path.join(dir, entry.name);
    
    if (shouldIgnore(fullPath)) {
      console.log(`Skipping ignored path: ${fullPath}`);
      continue;
    }
    
    if (entry.isDirectory()) {
      cleanDirectory(fullPath);
    } else if (
      (entry.name.endsWith('.js') || 
       entry.name.endsWith('.d.ts') || 
       entry.name.endsWith('.d.ts.map')) && 
      isGeneratedFile(fullPath)
    ) {
      console.log(`Removing generated file: ${fullPath}`);
      fs.unlinkSync(fullPath);
    }
  }
};

// Clean all directories
console.log('Cleaning up generated TypeScript files...');
dirsToClean.forEach(dir => {
  console.log(`\nScanning directory: ${dir}`);
  cleanDirectory(dir);
});

console.log('\nCleanup complete!'); 